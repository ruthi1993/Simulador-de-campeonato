/* --------- ConfiguraciÃ³n inicial (datos base hasta 24/10/2025) --------- */
const pilots = [
Â  {
Â  Â  id: 'verstappen',
Â  Â  name: 'Max Verstappen',
Â  Â  team: 'Red Bull',
Â  Â  basePoints: 321,
Â  Â  baseWins: 5,
Â  Â  points: 0,
Â  Â  wins: 0,
Â  Â  imgUrl: 'https://i.ibb.co/VWLdQwhf/Verstappen.jpg'
Â  },
Â  {
Â  Â  id: 'norris',
Â  Â  name: 'Lando Norris',
Â  Â  team: 'McLaren',
Â  Â  basePoints: 357,
Â  Â  baseWins: 6,
Â  Â  points: 0,
Â  Â  wins: 0,
Â  Â  imgUrl: 'https://i.ibb.co/jv621jZ0/Norris.jpg'
Â  },
Â  {
Â  Â  id: 'piastri',
Â  Â  name: 'Oscar Piastri',
Â  Â  team: 'McLaren',
Â  Â  basePoints: 356,
Â  Â  baseWins: 7,
Â  Â  points: 0,
Â  Â  wins: 0,
Â  Â  imgUrl: 'https://i.ibb.co/tGw36PM/Piastri.jpg'
Â  }
];

const racePoints = [25,18,15,12,10,8,6,4,2,1]; // 1..10
const sprintPoints = [8,7,6,5,4,3,2,1]; // 1..8

// Eventos restantes (con emoji de bandera)
const events = [
Â  { id:'sprint_brasil', label:'ðŸ‡§ðŸ‡· Sprint Brasil', type:'sprint' },
Â  { id:'brasil', Â  Â  Â  Â label:'ðŸ‡§ðŸ‡· GP Brasil', Â  Â  type:'race' Â  },
Â  { id:'lasvegas', Â  Â  Â label:'ðŸ‡ºðŸ‡¸ GP Las Vegas', Â type:'race' Â  },
Â  { id:'sprint_qatar', Â label:'ðŸ‡¶ðŸ‡¦ Sprint Qatar', Â type:'sprint' },
Â  { id:'qatar', Â  Â  Â  Â  label:'ðŸ‡¶ðŸ‡¦ GP Qatar', Â  Â  Â type:'race' Â  },
Â  { id:'abudhabi', Â  Â  Â label:'ðŸ‡¦ðŸ‡ª GP Abu Dhabi', Â  type:'race' Â  }
];

// selections[eventId][pilotId] = string position ('1'..'20' or '')
const selections = {};
events.forEach(ev => { selections[ev.id] = {}; pilots.forEach(p => selections[ev.id][p.id] = ''); });

/* --------- Render controles (selects) --------- */
const eventsList = document.getElementById('eventsList');

function buildControls(){
Â  eventsList.innerHTML = '';
Â  events.forEach(ev => {
Â  Â  const box = document.createElement('div');
Â  Â  box.className = 'event';
Â  Â  const h = document.createElement('h3'); h.textContent = ev.label + (ev.type==='sprint' ? ' â€” Sprint' : ' â€” Carrera');
Â  Â  box.appendChild(h);

Â  Â  pilots.forEach(p => {
Â  Â  Â  const row = document.createElement('div'); row.className = 'row';
Â  Â  Â  const lbl = document.createElement('label'); lbl.textContent = p.name;
Â  Â  Â  const sel = document.createElement('select');
Â  Â  Â  sel.dataset.event = ev.id; sel.dataset.pilot = p.id;
Â  Â  Â  // opciones Â (vacÃ­o + 1..20)
Â  Â  Â  const optEmpty = document.createElement('option'); optEmpty.value=''; optEmpty.textContent='-'; sel.appendChild(optEmpty);
Â  Â  Â  for(let i=1;i<=20;i++){
Â  Â  Â  Â  const o = document.createElement('option'); o.value = String(i); o.textContent = String(i);
Â  Â  Â  Â  sel.appendChild(o);
Â  Â  Â  }
Â  Â  Â  sel.addEventListener('change', onSelectChange);
Â  Â  Â  row.appendChild(lbl); row.appendChild(sel); box.appendChild(row);
Â  Â  });

Â  Â  eventsList.appendChild(box);
Â  });
}

/* --------- Manejo de selecciÃ³n: evita duplicados (swapping) --------- */
function onSelectChange(e){
Â  const sel = e.target;
Â  const evId = sel.dataset.event;
Â  const pid = sel.dataset.pilot;
Â  const newVal = sel.value; // '' or '1'..'20'

Â  const otherSelects = [...document.querySelectorAll(`select[data-event="${evId}"]`)];
Â  const prevVal = selections[evId][pid] || '';

Â  if(newVal === prevVal) return;

Â  // Si la nueva posiciÃ³n es un nÃºmero (1..20), chequeamos si hay colisiÃ³n
Â  if(newVal !== ''){
Â  Â  let collided = null;
Â  Â  for(const s of otherSelects){
Â  Â  Â  if(s.dataset.pilot !== pid && s.value === newVal){
Â  Â  Â  Â  collided = s; break;
Â  Â  Â  }
Â  Â  }
Â  Â  if(collided){
Â  Â  Â  // intercambiamos: collided toma prevVal (puede ser ''), y su DOM value se actualiza
Â  Â  Â  collided.value = prevVal;
Â  Â  Â  selections[evId][collided.dataset.pilot] = prevVal;
Â  Â  }
Â  }

Â  selections[evId][pid] = newVal;
Â  // actualizamos inmediatamente la tabla y el podio
Â  updateStandings();
}

/* --------- CÃ¡lculo de la clasificaciÃ³n --------- */
function calculateStandingsSorted(){
Â  // reset con base
Â  pilots.forEach(p => { p.points = p.basePoints || 0; p.wins = p.baseWins || 0; });

Â  // aplicar cada evento
Â  events.forEach(ev => {
Â  Â  const scheme = ev.type === 'sprint' ? sprintPoints : racePoints;
Â  Â  // map pos->pilot
Â  Â  const posMap = {};
Â  Â  pilots.forEach(p => {
Â  Â  Â  const posStr = selections[ev.id][p.id];
Â  Â  Â  if(posStr && posStr !== '') {
Â  Â  Â  Â  const pos = parseInt(posStr,10);
Â  Â  Â  Â  if(!isNaN(pos)) posMap[pos] = p.id;
Â  Â  Â  }
Â  Â  });
Â  Â  // asignar segÃºn el esquema (solo hasta scheme.length). posiciones fuera de rango no suman.
Â  Â  for(let pos=1; pos<=scheme.length; pos++){
Â  Â  Â  const pid = posMap[pos];
Â  Â  Â  if(pid){
Â  Â  Â  Â  const pilot = pilots.find(x=>x.id===pid);
Â  Â  Â  Â  pilot.points += scheme[pos-1];
Â  Â  Â  Â  // victorias solo si es carrera y pos === 1
Â  Â  Â  Â  if(ev.type === 'race' && pos === 1) pilot.wins += 1;
Â  Â  Â  }
Â  Â  }
Â  Â  // posiciones > scheme.length (ej. 11..20 en carrera o 9..20 en sprint) no suman puntos ni victorias
Â  });

Â  // ordenar por puntos desc, luego victorias desc (victorias solo de carreras)
Â  const sorted = [...pilots].sort((a,b) => {
Â  Â  if(b.points !== a.points) return b.points - a.points;
Â  Â  return b.wins - a.wins;
Â  });
Â  return sorted;
}

/* --------- Render tabla y podio (el podio centra al lÃ­der) --------- */
const standingsBody = document.getElementById('standingsBody');
const podiumEl = document.getElementById('podium');
const summaryEl = document.getElementById('summary');

function renderTableAndPodium(){
Â  const sorted = calculateStandingsSorted();

Â  // tabla
Â  standingsBody.innerHTML = '';
Â  sorted.forEach(p => {
Â  Â  const tr = document.createElement('tr');
Â  Â  tr.innerHTML = `<td><strong>${p.name}</strong></td><td>${p.points}</td><td>${p.wins}</td>`;
Â  Â  standingsBody.appendChild(tr);
Â  });

Â  // podio: queremos [2Â° , 1Â° , 3Â°] (visual) donde el primero estÃ¡ en el centro
Â  const first = sorted[0] || pilots[0];
Â  const second = sorted[1] || pilots[1];
Â  const third = sorted[2] || pilots[2];

Â  // construimos en ese orden: left=second, center=first, right=third
Â  const order = [second, first, third];

Â  // animaciÃ³n: aÃ±adimos clase 'pulse' al podio antes de reemplazar para efecto visual
Â  podiumEl.querySelectorAll('*').forEach(n => n.classList.remove('pulse'));

Â  podiumEl.innerHTML = '';
Â  order.forEach((p, idx) => {
Â  Â  if(!p) return;
Â  Â  const posClass = idx === 1 ? 'podium-pos-1' : (idx === 0 ? 'podium-pos-2' : 'podium-pos-3');
Â  Â  const box = document.createElement('div');
Â  Â  box.className = `podium-box ${posClass} pulse`;
Â  Â  // icono medalla opcional
Â  Â  const medal = idx === 1 ? 'ðŸ¥‡' : (idx === 0 ? 'ðŸ¥ˆ' : 'ðŸ¥‰');
Â  Â  // USO DE p.imgUrl (CORREGIDO)
Â  Â  box.innerHTML = `
Â  Â  Â  <img src="${p.imgUrl}" alt="${p.name}" class="podium-image">
Â  Â  Â  <div class="podium-step">${medal}</div>
Â  Â  Â  <div class="podium-name">${p.name}</div>
Â  Â  Â  <div class="podium-info">${p.points} pts â€¢ ${p.wins} vict.</div>
Â  Â  `;
Â  Â  podiumEl.appendChild(box);
Â  Â  // pequeÃ±a pausa para animaciÃ³n de escala (repaint)
Â  Â  setTimeout(()=> box.classList.remove('pulse'), 500);
Â  });

Â  // summary textual
Â  summaryEl.innerHTML = sorted.map((p,i)=>`${i+1}. <strong>${p.name}</strong> â€” ${p.points} pts (${p.wins} vict.)`).join('<br>');
}


/* --------- Helpers de UI (limpiar, ejemplo, export) --------- */
function updateStandings(){ renderTableAndPodium(); }

function clearSelections(){
Â  events.forEach(ev => {
Â  Â  pilots.forEach(p => { selections[ev.id][p.id] = ''; });
Â  });
Â  // reset selects in DOM
Â  document.querySelectorAll('#eventsList select').forEach(s => s.value = '');
Â  updateStandings();
}

function autoExample(){
Â  // ejemplo simple: permutaciones para que se vean cambios
Â  const perms = [
Â  Â  ['1','2','3'], ['2','1','3'], ['3','1','2'],
Â  Â  ['1','3','2'], ['2','3','1'], ['3','2','1']
Â  ];
Â  events.forEach((ev, idx) => {
Â  Â  const perm = perms[idx % perms.length];
Â  Â  pilots.forEach((p,i) => {
Â  Â  Â  selections[ev.id][p.id] = perm[i];
Â  Â  });
Â  });
Â  // reflect in DOM
Â  document.querySelectorAll('#eventsList select').forEach(sel => {
Â  Â  const ev = sel.dataset.event, pid = sel.dataset.pilot;
Â  Â  sel.value = selections[ev][pid] || '';
Â  });
Â  updateStandings();
}

function exportState(){
Â  const data = { pilotsBase: pilots.map(p=>({id:p.id, basePoints:p.basePoints, baseWins:p.baseWins})), selections };
Â  const txt = JSON.stringify(data, null, 2);
Â  const blob = new Blob([txt], {type:'application/json'});
Â  const url = URL.createObjectURL(blob);
Â  const a = document.createElement('a');
Â  a.href = url; a.download = 'simulador_export.json';
Â  document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
}

/* --------- InicializaciÃ³n: construir controles y asignar listeners --------- */
buildControls();
updateStandings();

// listeners botones
document.getElementById('clearBtn').addEventListener('click', ()=>{ if(confirm('Limpiar todas las posiciones?')) clearSelections(); });
document.getElementById('autoBtn').addEventListener('click', autoExample);
document.getElementById('exportBtn').addEventListener('click', exportState);